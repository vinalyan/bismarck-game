// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã "–ü–æ–≥–æ–Ω—è –∑–∞ –ë–∏—Å–º–∞—Ä–∫–æ–º"

import React, { useState, useEffect } from 'react';
import { useGameStore } from '../stores/gameStore';
import { ViewType, GamePhase, PlayerSide, NotificationType } from '../types/gameTypes';
import { HexCoordinate } from '../types/mapTypes';
import HexMap from './HexMap';
import './Game.css';

const Game: React.FC = () => {
  const {
    user,
    currentGame,
    logout,
    setCurrentView,
    addNotification,
    setLoading,
  } = useGameStore();

  const [selectedHex, setSelectedHex] = useState<string | null>(null);
  const [selectedUnit, setSelectedUnit] = useState<string | null>(null);
  const [showUnitInfo, setShowUnitInfo] = useState(false);

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞—Ä—Ç—ã (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã)
  const generateHexGrid = () => {
    const hexes = [];
    const rows = 15;
    const cols = 20;
    
    for (let row = 0; row < rows; row++) {
      for (let col = 0; col < cols; col++) {
        const hexId = `${row}-${col}`;
        const isWater = Math.random() > 0.3; // 70% –≤–æ–¥—ã
        const hasUnit = Math.random() > 0.95; // 5% —à–∞–Ω—Å –Ω–∞–ª–∏—á–∏—è —é–Ω–∏—Ç–∞
        
        hexes.push({
          id: hexId,
          row,
          col,
          isWater,
          hasUnit,
          unitType: hasUnit ? (Math.random() > 0.5 ? 'battleship' : 'destroyer') : null,
          side: hasUnit ? (Math.random() > 0.5 ? PlayerSide.German : PlayerSide.Allied) : null,
        });
      }
    }
    return hexes;
  };

  const [hexGrid] = useState(generateHexGrid());

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∏–≥—Ä–æ–∫–∞
  const playerSide = currentGame?.player1_id === user?.id 
    ? currentGame?.player1_side 
    : currentGame?.player2_side;

  const opponentSide = playerSide === PlayerSide.German 
    ? PlayerSide.Allied 
    : PlayerSide.German;

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
  const getCurrentPhaseText = (phase: GamePhase): string => {
    switch (phase) {
      case GamePhase.Waiting:
        return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞';
      case GamePhase.Setup:
        return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞';
      case GamePhase.Movement:
        return '–§–∞–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è';
      case GamePhase.Search:
        return '–§–∞–∑–∞ –ø–æ–∏—Å–∫–∞';
      case GamePhase.Combat:
        return '–ë–æ–µ–≤–∞—è —Ñ–∞–∑–∞';
      case GamePhase.End:
        return '–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≥–µ–∫—Å—É
  const handleHexClick = (hexId: string) => {
    setSelectedHex(hexId);
    const hex = hexGrid.find(h => h.id === hexId);
    if (hex?.hasUnit) {
      setSelectedUnit(hexId);
      setShowUnitInfo(true);
    }
  };

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –ª–æ–±–±–∏
  const handleBackToLobby = () => {
    setCurrentView(ViewType.Lobby);
  };

  // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
  const handleLogout = () => {
    logout();
    setCurrentView(ViewType.Login);
  };

  if (!currentGame || !user) {
    return (
      <div className="game-container">
        <div className="game-error">
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</p>
          <button onClick={handleBackToLobby} className="back-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="game-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã */}
      <div className="game-header">
        <div className="game-title">
          <h1>üéÆ {currentGame.name}</h1>
          <div className="game-info">
            <span className="phase-info">
              –§–∞–∑–∞: {getCurrentPhaseText(currentGame.current_phase)}
            </span>
            <span className="turn-info">
              –•–æ–¥: {currentGame.current_turn}
            </span>
          </div>
        </div>
        
        <div className="game-controls">
          <div className="player-info">
            <span className="player-side">
              –í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: {playerSide === PlayerSide.German ? 'üá©üá™ –ù–µ–º—Ü—ã' : 'üá¨üáß –°–æ—é–∑–Ω–∏–∫–∏'}
            </span>
          </div>
          <button onClick={handleBackToLobby} className="back-button">
            ‚Üê –õ–æ–±–±–∏
          </button>
          <button onClick={handleLogout} className="logout-button">
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–≥—Ä—ã */}
      <div className="game-content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ */}
        <div className="game-sidebar">
          <div className="game-status">
            <h3>–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã</h3>
            <div className="status-item">
              <span>–§–∞–∑–∞:</span>
              <span className="status-value">{getCurrentPhaseText(currentGame.current_phase)}</span>
            </div>
            <div className="status-item">
              <span>–•–æ–¥:</span>
              <span className="status-value">{currentGame.current_turn}</span>
            </div>
            <div className="status-item">
              <span>–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞:</span>
              <span className="status-value">
                {playerSide === PlayerSide.German ? 'üá©üá™ –ù–µ–º—Ü—ã' : 'üá¨üáß –°–æ—é–∑–Ω–∏–∫–∏'}
              </span>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–Ω–∏—Ç–∞—Ö */}
          <div className="units-info">
            <h3>–í–∞—à–∏ —é–Ω–∏—Ç—ã</h3>
            <div className="unit-list">
              <div className="unit-item">
                <span className="unit-type">üö¢ –õ–∏–Ω–∫–æ—Ä –ë–∏—Å–º–∞—Ä–∫</span>
                <span className="unit-status">–í –º–æ—Ä–µ</span>
              </div>
              <div className="unit-item">
                <span className="unit-type">üö¢ –¢—è–∂–µ–ª—ã–π –∫—Ä–µ–π—Å–µ—Ä –ü—Ä–∏–Ω—Ü –û–π–≥–µ–Ω</span>
                <span className="unit-status">–í –º–æ—Ä–µ</span>
              </div>
              <div className="unit-item">
                <span className="unit-type">‚úàÔ∏è –†–∞–∑–≤–µ–¥—á–∏–∫</span>
                <span className="unit-status">–í –ø–æ–ª–µ—Ç–µ</span>
              </div>
            </div>
          </div>

          {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–µ–∫—Å/—é–Ω–∏—Ç */}
          {selectedHex && (
            <div className="selected-info">
              <h3>–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è</h3>
              <div className="hex-info">
                <span>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {selectedHex}</span>
                {selectedUnit && (
                  <div className="unit-details">
                    <span>–Æ–Ω–∏—Ç: {selectedUnit}</span>
                    <span>–°—Ç–æ—Ä–æ–Ω–∞: {PlayerSide.German}</span>
                    <span>–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ê–∫—Ç–∏–≤–µ–Ω</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –∫–∞—Ä—Ç–∞ */}
        <div className="game-map">
          <div className="map-header">
            <h3>–ö–∞—Ä—Ç–∞ –°–µ–≤–µ—Ä–Ω–æ–π –ê—Ç–ª–∞–Ω—Ç–∏–∫–∏</h3>
            <div className="map-legend">
              <div className="legend-item">
                <div className="legend-color water"></div>
                <span>–í–æ–¥–∞</span>
              </div>
              <div className="legend-item">
                <div className="legend-color land"></div>
                <span>–°—É—à–∞</span>
              </div>
              <div className="legend-item">
                <div className="legend-color german-unit"></div>
                <span>üá©üá™ –ù–µ–º–µ—Ü–∫–∏–µ —é–Ω–∏—Ç—ã</span>
              </div>
              <div className="legend-item">
                <div className="legend-color allied-unit"></div>
                <span>üá¨üáß –°–æ—é–∑–Ω–∏—á–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã</span>
              </div>
            </div>
          </div>
          
          <HexMap
            width={35}
            height={34}
            onHexClick={(coordinate: HexCoordinate) => {
              const hexId = `${coordinate.letter}${coordinate.number}`;
              handleHexClick(hexId);
            }}
            onHexHover={(coordinate: HexCoordinate) => {
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            }}
            selectedHex={selectedHex ? {
              letter: selectedHex.charAt(0),
              number: parseInt(selectedHex.slice(1)),
              q: 0, r: 0
            } : null}
            highlightedHexes={[]}
          />
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="game-actions">
          <div className="action-panel">
            <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
            <div className="action-buttons">
              <button 
                className="action-button"
                disabled={currentGame.current_phase !== GamePhase.Movement}
              >
                –î–≤–∏–∂–µ–Ω–∏–µ
              </button>
              <button 
                className="action-button"
                disabled={currentGame.current_phase !== GamePhase.Search}
              >
                –ü–æ–∏—Å–∫
              </button>
              <button 
                className="action-button"
                disabled={currentGame.current_phase !== GamePhase.Combat}
              >
                –ë–æ–π
              </button>
              <button className="action-button">
                –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ */}
          <div className="weather-info">
            <h3>–ü–æ–≥–æ–¥–∞</h3>
            <div className="weather-item">
              <span>–í–∏–¥–∏–º–æ—Å—Ç—å:</span>
              <span className="weather-value">–•–æ—Ä–æ—à–∞—è</span>
            </div>
            <div className="weather-item">
              <span>–í–µ—Ç–µ—Ä:</span>
              <span className="weather-value">–£–º–µ—Ä–µ–Ω–Ω—ã–π</span>
            </div>
            <div className="weather-item">
              <span>–í–æ–ª–Ω–µ–Ω–∏–µ:</span>
              <span className="weather-value">–°–ª–∞–±–æ–µ</span>
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —é–Ω–∏—Ç–µ */}
      {showUnitInfo && selectedUnit && (
        <div className="modal-overlay" onClick={() => setShowUnitInfo(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–Ω–∏—Ç–µ</h3>
              <button 
                className="modal-close"
                onClick={() => setShowUnitInfo(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="unit-details">
                <div className="detail-item">
                  <span>–¢–∏–ø:</span>
                  <span>–õ–∏–Ω–∫–æ—Ä –ë–∏—Å–º–∞—Ä–∫</span>
                </div>
                <div className="detail-item">
                  <span>–°—Ç–æ—Ä–æ–Ω–∞:</span>
                  <span>üá©üá™ –ù–µ–º—Ü—ã</span>
                </div>
                <div className="detail-item">
                  <span>–ü–æ–∑–∏—Ü–∏—è:</span>
                  <span>{selectedUnit}</span>
                </div>
                <div className="detail-item">
                  <span>–¢–æ–ø–ª–∏–≤–æ:</span>
                  <span>85%</span>
                </div>
                <div className="detail-item">
                  <span>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
                  <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Game;
