// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≥–µ–∫—Å–∞

import React from 'react';
import { HexCoordinate, HexData } from '../types/mapTypes';
import { Point } from '../utils/hexUtils';
import './Hex.css';

interface HexProps {
  coordinate: HexCoordinate;
  hexData: HexData;
  center: Point;
  corners: Point[];
  size: number;
  isSelected: boolean;
  isSecondSelected: boolean;
  isHighlighted: boolean;
  isHighlightedGreen: boolean;
  onClick: () => void;
  onHover: () => void;
  onUnitHover?: (unitId: string, unitType: string, unitSide: string, x: number, y: number) => void;
  onUnitLeave?: () => void;
}

const Hex: React.FC<HexProps> = ({
  coordinate,
  hexData,
  center,
  corners,
  size,
  isSelected,
  isSecondSelected,
  isHighlighted,
  isHighlightedGreen,
  onClick,
  onHover,
  onUnitHover,
  onUnitLeave
}) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∏–∫–æ–Ω–∫–µ —é–Ω–∏—Ç–∞
  const getUnitIcon = (unitType: string, unitSide: string) => {
    if (['BB', 'BC', 'CV', 'CA', 'CL', 'DD', 'CG', 'TK'].includes(unitType)) {
      return `/assets/units/${unitSide}/naval/${unitType}.svg`;
    } else if (unitType === 'B') {
      return `/assets/units/${unitSide}/air/Bomber.svg`;
    } else if (unitType === 'R') {
      return `/assets/units/${unitSide}/air/Recon.svg`;
    }
    return `/assets/units/${unitSide}/${unitType}.svg`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —é–Ω–∏—Ç–∞
  const getUnitDescription = (unitType: string, unitId: string, unitSide: string) => {
    const sideName = unitSide === 'german' ? '–ù–µ–º–µ—Ü–∫–∏–π' : '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π';
    const sideFlag = unitSide === 'german' ? 'üá©üá™' : 'üá¨üáß';
    
    const typeNames: { [key: string]: string } = {
      'BB': '–õ–∏–Ω–µ–π–Ω—ã–π –∫–æ—Ä–∞–±–ª—å',
      'BC': '–õ–∏–Ω–µ–π–Ω—ã–π –∫—Ä–µ–π—Å–µ—Ä',
      'CV': '–ê–≤–∏–∞–Ω–æ—Å–µ—Ü',
      'CA': '–¢—è–∂–µ–ª—ã–π –∫—Ä–µ–π—Å–µ—Ä',
      'CL': '–õ–µ–≥–∫–∏–π –∫—Ä–µ–π—Å–µ—Ä',
      'DD': '–≠—Å–º–∏–Ω–µ—Ü',
      'CG': '–ë–µ—Ä–µ–≥–æ–≤–∞—è –æ—Ö—Ä–∞–Ω–∞',
      'TK': '–¢–∞–Ω–∫–µ—Ä',
      'B': '–ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤—â–∏–∫',
      'R': '–†–∞–∑–≤–µ–¥—á–∏–∫'
    };

    const typeName = typeNames[unitType] || unitType;
    const coordinates = `${coordinate.letter}${coordinate.number}`;
    
    return `${sideFlag} ${sideName} ${typeName}\n${unitId}\n–ü–æ–∑–∏—Ü–∏—è: ${coordinates}`;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è tooltip
  const handleMouseEnter = (e: React.MouseEvent) => {
    e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    if (hexData.hasUnit && hexData.unitId && onUnitHover) {
      onUnitHover(
        hexData.unitId,
        hexData.unitType || '',
        hexData.unitSide || 'german',
        e.clientX,
        e.clientY
      );
    }
  };

  const handleMouseLeave = (e: React.MouseEvent) => {
    e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    if (onUnitLeave) {
      onUnitLeave();
    }
  };
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–ª—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è SVG polygon
  const getHexPoints = () => {
    return corners.map(corner => `${corner.x},${corner.y}`).join(' ');
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –≥–µ–∫—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getHexStyle = () => {
    let fill = '';
    let stroke = 'transparent'; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    let strokeWidth = 1;
    let fillOpacity = 0; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –≥–µ–∫—Å—ã
    
    // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–∫—Å–∞ (–≤—Å–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ)
    switch (hexData.type) {
      case 'water':
        fill = 'url(#waterGradient)';
        fillOpacity = 0; // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        stroke = 'transparent';
        break;
      case 'land':
        fill = 'url(#landGradient)';
        fillOpacity = 0; // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        stroke = 'transparent';
        break;
      case 'port':
        fill = 'url(#portGradient)';
        fillOpacity = 0; // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        stroke = 'transparent';
        strokeWidth = 2;
        break;
      default:
        fill = '#cccccc';
        fillOpacity = 0; // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        stroke = 'transparent';
    }
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ–∫—Å–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—Ç–æ—Ä–æ–π > –ø–µ—Ä–≤—ã–π)
    if (isSecondSelected) {
      stroke = '#ff6600'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
      strokeWidth = 3;
    } else if (isSelected) {
      stroke = '#ff0000'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
      strokeWidth = 3;
    }
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö –≥–µ–∫—Å–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∑–µ–ª–µ–Ω–æ–µ > –∂–µ–ª—Ç–æ–µ)
    if (isHighlightedGreen) {
      stroke = '#00ff00';
      strokeWidth = 3;
    } else if (isHighlighted) {
      stroke = '#ffff00';
      strokeWidth = 2;
    }
    
    return { fill, stroke, strokeWidth, fillOpacity };
  };

  const hexStyle = getHexStyle();
  const points = getHexPoints();

  return (
    <>
      <g
        className={`hex ${hexData.type} ${isSelected ? 'selected' : ''} ${isSecondSelected ? 'second-selected' : ''} ${isHighlighted ? 'highlighted' : ''} ${isHighlightedGreen ? 'highlighted-green' : ''}`}
        onClick={onClick}
        onMouseEnter={onHover}
        style={{ cursor: 'pointer' }}
      >
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–∫—Å */}
      <polygon
        points={points}
        fill={hexStyle.fill}
        fillOpacity={hexStyle.fillOpacity}
        stroke={hexStyle.stroke}
        strokeWidth={hexStyle.strokeWidth}
        className="hex-shape"
      />
      
      
      {/* –Æ–Ω–∏—Ç –Ω–∞ –≥–µ–∫—Å–µ */}
      {hexData.hasUnit && hexData.unitId && (
        <g 
          className="unit-container"
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
        >
          {/* –§–æ–Ω–æ–≤—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ */}
          <circle
            cx={center.x}
            cy={center.y}
            r={size * 0.5}
            fill="rgba(255, 255, 255, 0.9)"
            stroke={hexData.unitSide === 'german' ? '#1e3a8a' : '#991b1b'}
            strokeWidth={2}
            className="unit-background"
          />
          {/* –ò–∫–æ–Ω–∫–∞ —é–Ω–∏—Ç–∞ */}
          <image
            href={getUnitIcon(hexData.unitType || '', hexData.unitSide || 'german')}
            x={center.x - size * 0.5}
            y={center.y - size * 0.5}
            width={size * 1.0}
            height={size * 1.0}
            className="unit-icon"
            preserveAspectRatio="xMidYMid meet"
          />
        </g>
      )}
      
      {/* –ú–∞—Ä–∫–µ—Ä —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã */}
      {hexData.fogLevel > 0 && (
        <circle
          cx={center.x}
          cy={center.y + size * 0.2}
          r={size * 0.15}
          fill="#333333"
          opacity={hexData.fogLevel / 100}
          className="fog-marker"
        />
      )}
      
      {/* –ü–æ–≥–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      {hexData.weather === 'storm' && (
        <path
          d={`M ${center.x - size * 0.3} ${center.y - size * 0.3} L ${center.x + size * 0.3} ${center.y + size * 0.3} M ${center.x + size * 0.3} ${center.y - size * 0.3} L ${center.x - size * 0.3} ${center.y + size * 0.3}`}
          stroke="#ffffff"
          strokeWidth={1}
          opacity={0.7}
          className="weather-effect"
        />
      )}
      </g>
    </>
  );
};

export { Hex };
